# Author: CyberPrudent AKA Andrew
# Description:
#
# This program implements a simple stream cipher using the XOR operation. The cipher works by taking
# the bytes of a message to be encrypted and XORing them with corresponding bytes of a secret key and
# a stream of random bytes. The resulting encrypted message can then be decrypted by XORing it with the
# same key and stream of random bytes.
#
# The program defines a constant KEY as the secret key for the cipher. It then initializes a message to be
# encrypted as a string "Hello, world!" and converts it into a byte array using the encode() method. The encrypt()
# method is called with the message byte array as an argument. This method XORs each byte of the message with the
# corresponding byte of the secret key and a random byte generated by a Random object, and stores the result in a
# new byte array representing the encrypted message.
#
# The decrypt() method is called with the encrypted message byte array as an argument. This method simply calls
# the encrypt() method again, which reverses the encryption process and produces the original message byte array.

import random

KEY = "mySecretKey" # Secret key for the cipher

def main():
    message = "Hello, world!" # The message to be encrypted
    encrypted_message = encrypt(message.encode()) # Encrypt the message
    decrypted_message = decrypt(encrypted_message).decode() # Decrypt the encrypted message
    print("Original message: " + message)
    print("Encrypted message: " + encrypted_message.decode())
    print("Decrypted message: " + decrypted_message)

def encrypt(message):
    key_bytes = KEY.encode() # Get the bytes of the secret key
    encrypted = bytearray(len(message)) # Initialize the encrypted message
    rand = random.Random(hash(KEY)) # Create a new random number generator with the hash code of the secret key as the seed
    for i in range(len(message)):
        # XOR the message byte with the corresponding key byte and a random byte, and store the result in the encrypted message
        encrypted[i] = message[i] ^ key_bytes[i % len(key_bytes)] ^ rand.randint(0, 255)
    return encrypted

def decrypt(encrypted):
    return encrypt(encrypted) # XOR is symmetric, so encryption and decryption are the same

if __name__ == '__main__':
    main()
